{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"C:\\Users\\N_Has\\Desktop\\FIT3170\\2025W1-All-In-One\\Application\\all-in-one\\packages\\ddp-client\\common\\message_processors.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"packages/ddp-client/common/message_processors.js","filename":"C:\\Users\\N_Has\\Desktop\\FIT3170\\2025W1-All-In-One\\Application\\all-in-one\\packages\\ddp-client\\common\\message_processors.js","targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"C:\\Users\\N_Has\\Desktop\\FIT3170\\2025W1-All-In-One\\Application\\all-in-one","root":"C:\\Users\\N_Has\\Desktop\\FIT3170\\2025W1-All-In-One\\Application\\all-in-one","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":true,"enforceStrictMode":false,"dynamicImport":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"base$0$3","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$4","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null,null]},"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"DoWhileStatement":{"exit":[null]},"ForInStatement":{"exit":[null]},"ForStatement":{"exit":[null]},"WhileStatement":{"exit":[null]},"ForOfStatement":{"exit":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"StaticBlock":{"enter":[null]},"TSModuleBlock":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectPattern":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-regenerator","visitor":{"ObjectMethod":{"enter":[null],"exit":[null]},"ClassMethod":{"enter":[null],"exit":[null]},"ClassPrivateMethod":{"enter":[null],"exit":[null]},"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"CallExpression":{"enter":[null]}},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"C:\\Users\\N_Has\\Desktop\\FIT3170\\2025W1-All-In-One\\Application\\all-in-one\\packages\\ddp-client\\common\\message_processors.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/ddp-client/common/message_processors.js"}},"code":"var _regeneratorRuntime;\nmodule.link(\"@babel/runtime/regenerator\", {\n  default: function (v) {\n    _regeneratorRuntime = v;\n  }\n}, 0);\nvar _slicedToArray;\nmodule.link(\"@babel/runtime/helpers/slicedToArray\", {\n  default: function (v) {\n    _slicedToArray = v;\n  }\n}, 1);\nmodule.export({\n  MessageProcessors: function () {\n    return MessageProcessors;\n  }\n});\nvar DDPCommon;\nmodule.link(\"meteor/ddp-common\", {\n  DDPCommon: function (v) {\n    DDPCommon = v;\n  }\n}, 0);\nvar Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 1);\nvar DDP;\nmodule.link(\"./namespace.js\", {\n  DDP: function (v) {\n    DDP = v;\n  }\n}, 2);\nvar EJSON;\nmodule.link(\"meteor/ejson\", {\n  EJSON: function (v) {\n    EJSON = v;\n  }\n}, 3);\nvar isEmpty, hasOwn;\nmodule.link(\"meteor/ddp-common/utils\", {\n  isEmpty: function (v) {\n    isEmpty = v;\n  },\n  hasOwn: function (v) {\n    hasOwn = v;\n  }\n}, 4);\nvar MessageProcessors = /*#__PURE__*/function () {\n  function MessageProcessors(connection) {\n    this._connection = connection;\n  }\n\n  /**\n   * @summary Process the connection message and set up the session\n   * @param {Object} msg The connection message\n   */\n  var _proto = MessageProcessors.prototype;\n  _proto._livedata_connected = function () {\n    function _livedata_connected(msg) {\n      var self, reconnectedToPreviousSession, invokers, _i, _Object$values, store;\n      return _regeneratorRuntime.async(function () {\n        function _livedata_connected$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              self = this._connection;\n              if (self._version !== 'pre1' && self._heartbeatInterval !== 0) {\n                self._heartbeat = new DDPCommon.Heartbeat({\n                  heartbeatInterval: self._heartbeatInterval,\n                  heartbeatTimeout: self._heartbeatTimeout,\n                  onTimeout: function () {\n                    self._lostConnection(new DDP.ConnectionError('DDP heartbeat timed out'));\n                  },\n                  sendPing: function () {\n                    self._send({\n                      msg: 'ping'\n                    });\n                  }\n                });\n                self._heartbeat.start();\n              }\n\n              // If this is a reconnect, we'll have to reset all stores.\n              if (self._lastSessionId) self._resetStores = true;\n              if (typeof msg.session === 'string') {\n                reconnectedToPreviousSession = self._lastSessionId === msg.session;\n                self._lastSessionId = msg.session;\n              }\n              if (!reconnectedToPreviousSession) {\n                _context.next = 6;\n                break;\n              }\n              return _context.abrupt(\"return\");\n            case 6:\n              // Server doesn't have our data anymore. Re-sync a new session.\n\n              // Forget about messages we were buffering for unknown collections. They'll\n              // be resent if still relevant.\n              self._updatesForUnknownStores = Object.create(null);\n              if (self._resetStores) {\n                // Forget about the effects of stubs. We'll be resetting all collections\n                // anyway.\n                self._documentsWrittenByStub = Object.create(null);\n                self._serverDocuments = Object.create(null);\n              }\n\n              // Clear _afterUpdateCallbacks.\n              self._afterUpdateCallbacks = [];\n\n              // Mark all named subscriptions which are ready as needing to be revived.\n              self._subsBeingRevived = Object.create(null);\n              Object.entries(self._subscriptions).forEach(function (_ref) {\n                var _ref2 = _slicedToArray(_ref, 2),\n                  id = _ref2[0],\n                  sub = _ref2[1];\n                if (sub.ready) {\n                  self._subsBeingRevived[id] = true;\n                }\n              });\n\n              // Arrange for \"half-finished\" methods to have their callbacks run, and\n              // track methods that were sent on this connection so that we don't\n              // quiesce until they are all done.\n              //\n              // Start by clearing _methodsBlockingQuiescence: methods sent before\n              // reconnect don't matter, and any \"wait\" methods sent on the new connection\n              // that we drop here will be restored by the loop below.\n              self._methodsBlockingQuiescence = Object.create(null);\n              if (self._resetStores) {\n                invokers = self._methodInvokers;\n                Object.keys(invokers).forEach(function (id) {\n                  var invoker = invokers[id];\n                  if (invoker.gotResult()) {\n                    // This method already got its result, but it didn't call its callback\n                    // because its data didn't become visible. We did not resend the\n                    // method RPC. We'll call its callback when we get a full quiesce,\n                    // since that's as close as we'll get to \"data must be visible\".\n                    self._afterUpdateCallbacks.push(function () {\n                      return invoker.dataVisible.apply(invoker, arguments);\n                    });\n                  } else if (invoker.sentMessage) {\n                    // This method has been sent on this connection (maybe as a resend\n                    // from the last connection, maybe from onReconnect, maybe just very\n                    // quickly before processing the connected message).\n                    //\n                    // We don't need to do anything special to ensure its callbacks get\n                    // called, but we'll count it as a method which is preventing\n                    // reconnect quiescence. (eg, it might be a login method that was run\n                    // from onReconnect, and we don't want to see flicker by seeing a\n                    // logged-out state.)\n                    self._methodsBlockingQuiescence[invoker.methodId] = true;\n                  }\n                });\n              }\n              self._messagesBufferedUntilQuiescence = [];\n\n              // If we're not waiting on any methods or subs, we can reset the stores and\n              // call the callbacks immediately.\n              if (self._waitingForQuiescence()) {\n                _context.next = 28;\n                break;\n              }\n              if (!self._resetStores) {\n                _context.next = 27;\n                break;\n              }\n              _i = 0, _Object$values = Object.values(self._stores);\n            case 17:\n              if (!(_i < _Object$values.length)) {\n                _context.next = 26;\n                break;\n              }\n              store = _Object$values[_i];\n              _context.next = 21;\n              return _regeneratorRuntime.awrap(store.beginUpdate(0, true));\n            case 21:\n              _context.next = 23;\n              return _regeneratorRuntime.awrap(store.endUpdate());\n            case 23:\n              _i++;\n              _context.next = 17;\n              break;\n            case 26:\n              self._resetStores = false;\n            case 27:\n              self._runAfterUpdateCallbacks();\n            case 28:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n        return _livedata_connected$;\n      }(), null, this, null, Promise);\n    }\n    return _livedata_connected;\n  }()\n  /**\n   * @summary Process various data messages from the server\n   * @param {Object} msg The data message\n   */\n  ;\n  _proto._livedata_data = function () {\n    function _livedata_data(msg) {\n      var self, bufferedMessages, _i2, _Object$values2, bufferedMessage, standardWrite;\n      return _regeneratorRuntime.async(function () {\n        function _livedata_data$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              self = this._connection;\n              if (!self._waitingForQuiescence()) {\n                _context2.next = 20;\n                break;\n              }\n              self._messagesBufferedUntilQuiescence.push(msg);\n              if (msg.msg === 'nosub') {\n                delete self._subsBeingRevived[msg.id];\n              }\n              if (msg.subs) {\n                msg.subs.forEach(function (subId) {\n                  delete self._subsBeingRevived[subId];\n                });\n              }\n              if (msg.methods) {\n                msg.methods.forEach(function (methodId) {\n                  delete self._methodsBlockingQuiescence[methodId];\n                });\n              }\n              if (!self._waitingForQuiescence()) {\n                _context2.next = 8;\n                break;\n              }\n              return _context2.abrupt(\"return\");\n            case 8:\n              // No methods or subs are blocking quiescence!\n              // We'll now process and all of our buffered messages, reset all stores,\n              // and apply them all at once.\n              bufferedMessages = self._messagesBufferedUntilQuiescence;\n              _i2 = 0, _Object$values2 = Object.values(bufferedMessages);\n            case 10:\n              if (!(_i2 < _Object$values2.length)) {\n                _context2.next = 17;\n                break;\n              }\n              bufferedMessage = _Object$values2[_i2];\n              _context2.next = 14;\n              return _regeneratorRuntime.awrap(this._processOneDataMessage(bufferedMessage, self._bufferedWrites));\n            case 14:\n              _i2++;\n              _context2.next = 10;\n              break;\n            case 17:\n              self._messagesBufferedUntilQuiescence = [];\n              _context2.next = 22;\n              break;\n            case 20:\n              _context2.next = 22;\n              return _regeneratorRuntime.awrap(this._processOneDataMessage(msg, self._bufferedWrites));\n            case 22:\n              // Immediately flush writes when:\n              //  1. Buffering is disabled. Or;\n              //  2. any non-(added/changed/removed) message arrives.\n              standardWrite = msg.msg === \"added\" || msg.msg === \"changed\" || msg.msg === \"removed\";\n              if (!(self._bufferedWritesInterval === 0 || !standardWrite)) {\n                _context2.next = 27;\n                break;\n              }\n              _context2.next = 26;\n              return _regeneratorRuntime.awrap(self._flushBufferedWrites());\n            case 26:\n              return _context2.abrupt(\"return\");\n            case 27:\n              if (!(self._bufferedWritesFlushAt === null)) {\n                _context2.next = 31;\n                break;\n              }\n              self._bufferedWritesFlushAt = new Date().valueOf() + self._bufferedWritesMaxAge;\n              _context2.next = 35;\n              break;\n            case 31:\n              if (!(self._bufferedWritesFlushAt < new Date().valueOf())) {\n                _context2.next = 35;\n                break;\n              }\n              _context2.next = 34;\n              return _regeneratorRuntime.awrap(self._flushBufferedWrites());\n            case 34:\n              return _context2.abrupt(\"return\");\n            case 35:\n              if (self._bufferedWritesFlushHandle) {\n                clearTimeout(self._bufferedWritesFlushHandle);\n              }\n              self._bufferedWritesFlushHandle = setTimeout(function () {\n                self._liveDataWritesPromise = self._flushBufferedWrites();\n                if (Meteor._isPromise(self._liveDataWritesPromise)) {\n                  self._liveDataWritesPromise.finally(function () {\n                    return self._liveDataWritesPromise = undefined;\n                  });\n                }\n              }, self._bufferedWritesInterval);\n            case 37:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n        return _livedata_data$;\n      }(), null, this, null, Promise);\n    }\n    return _livedata_data;\n  }()\n  /**\n   * @summary Process individual data messages by type\n   * @private\n   */\n  ;\n  _proto._processOneDataMessage = function () {\n    function _processOneDataMessage(msg, updates) {\n      var messageType;\n      return _regeneratorRuntime.async(function () {\n        function _processOneDataMessage$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              messageType = msg.msg;\n              _context3.t0 = messageType;\n              _context3.next = _context3.t0 === 'added' ? 4 : _context3.t0 === 'changed' ? 7 : _context3.t0 === 'removed' ? 9 : _context3.t0 === 'ready' ? 11 : _context3.t0 === 'updated' ? 13 : _context3.t0 === 'nosub' ? 15 : 16;\n              break;\n            case 4:\n              _context3.next = 6;\n              return _regeneratorRuntime.awrap(this._connection._process_added(msg, updates));\n            case 6:\n              return _context3.abrupt(\"break\", 17);\n            case 7:\n              this._connection._process_changed(msg, updates);\n              return _context3.abrupt(\"break\", 17);\n            case 9:\n              this._connection._process_removed(msg, updates);\n              return _context3.abrupt(\"break\", 17);\n            case 11:\n              this._connection._process_ready(msg, updates);\n              return _context3.abrupt(\"break\", 17);\n            case 13:\n              this._connection._process_updated(msg, updates);\n              return _context3.abrupt(\"break\", 17);\n            case 15:\n              return _context3.abrupt(\"break\", 17);\n            case 16:\n              Meteor._debug('discarding unknown livedata data message type', msg);\n            case 17:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n        return _processOneDataMessage$;\n      }(), null, this, null, Promise);\n    }\n    return _processOneDataMessage;\n  }()\n  /**\n   * @summary Handle method results arriving from the server\n   * @param {Object} msg The method result message\n   */\n  ;\n  _proto._livedata_result = function () {\n    function _livedata_result(msg) {\n      var self, currentMethodBlock, i, m;\n      return _regeneratorRuntime.async(function () {\n        function _livedata_result$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              self = this._connection; // Lets make sure there are no buffered writes before returning result.\n              if (isEmpty(self._bufferedWrites)) {\n                _context4.next = 4;\n                break;\n              }\n              _context4.next = 4;\n              return _regeneratorRuntime.awrap(self._flushBufferedWrites());\n            case 4:\n              if (!isEmpty(self._outstandingMethodBlocks)) {\n                _context4.next = 7;\n                break;\n              }\n              Meteor._debug('Received method result but no methods outstanding');\n              return _context4.abrupt(\"return\");\n            case 7:\n              currentMethodBlock = self._outstandingMethodBlocks[0].methods;\n              m = currentMethodBlock.find(function (method, idx) {\n                var found = method.methodId === msg.id;\n                if (found) i = idx;\n                return found;\n              });\n              if (m) {\n                _context4.next = 12;\n                break;\n              }\n              Meteor._debug(\"Can't match method response to original method call\", msg);\n              return _context4.abrupt(\"return\");\n            case 12:\n              // Remove from current method block. This may leave the block empty, but we\n              // don't move on to the next block until the callback has been delivered, in\n              // _outstandingMethodFinished.\n              currentMethodBlock.splice(i, 1);\n              if (hasOwn.call(msg, 'error')) {\n                m.receiveResult(new Meteor.Error(msg.error.error, msg.error.reason, msg.error.details));\n              } else {\n                // msg.result may be undefined if the method didn't return a value\n                m.receiveResult(undefined, msg.result);\n              }\n            case 14:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n        return _livedata_result$;\n      }(), null, this, null, Promise);\n    }\n    return _livedata_result;\n  }()\n  /**\n   * @summary Handle \"nosub\" messages arriving from the server\n   * @param {Object} msg The nosub message\n   */\n  ;\n  _proto._livedata_nosub = function () {\n    function _livedata_nosub(msg) {\n      var self, errorCallback, stopCallback, meteorErrorFromMsg;\n      return _regeneratorRuntime.async(function () {\n        function _livedata_nosub$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              self = this._connection; // First pass it through _livedata_data, which only uses it to help get\n              // towards quiescence.\n              _context5.next = 3;\n              return _regeneratorRuntime.awrap(this._livedata_data(msg));\n            case 3:\n              if (hasOwn.call(self._subscriptions, msg.id)) {\n                _context5.next = 5;\n                break;\n              }\n              return _context5.abrupt(\"return\");\n            case 5:\n              // XXX COMPAT WITH 1.0.3.1 #errorCallback\n              errorCallback = self._subscriptions[msg.id].errorCallback;\n              stopCallback = self._subscriptions[msg.id].stopCallback;\n              self._subscriptions[msg.id].remove();\n              meteorErrorFromMsg = function (msgArg) {\n                return msgArg && msgArg.error && new Meteor.Error(msgArg.error.error, msgArg.error.reason, msgArg.error.details);\n              }; // XXX COMPAT WITH 1.0.3.1 #errorCallback\n              if (errorCallback && msg.error) {\n                errorCallback(meteorErrorFromMsg(msg));\n              }\n              if (stopCallback) {\n                stopCallback(meteorErrorFromMsg(msg));\n              }\n            case 11:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n        return _livedata_nosub$;\n      }(), null, this, null, Promise);\n    }\n    return _livedata_nosub;\n  }()\n  /**\n   * @summary Handle errors from the server\n   * @param {Object} msg The error message\n   */\n  ;\n  _proto._livedata_error = function () {\n    function _livedata_error(msg) {\n      Meteor._debug('Received error from server: ', msg.reason);\n      if (msg.offendingMessage) Meteor._debug('For: ', msg.offendingMessage);\n    }\n    return _livedata_error;\n  }() // Document change message processors will be defined in a separate class\n  ;\n  return MessageProcessors;\n}();","map":{"version":3,"names":["_regeneratorRuntime","module","link","default","v","_slicedToArray","export","MessageProcessors","DDPCommon","Meteor","DDP","EJSON","isEmpty","hasOwn","connection","_connection","_proto","prototype","_livedata_connected","msg","self","reconnectedToPreviousSession","invokers","_i","_Object$values","store","async","_livedata_connected$","_context","prev","next","_version","_heartbeatInterval","_heartbeat","Heartbeat","heartbeatInterval","heartbeatTimeout","_heartbeatTimeout","onTimeout","_lostConnection","ConnectionError","sendPing","_send","start","_lastSessionId","_resetStores","session","abrupt","_updatesForUnknownStores","Object","create","_documentsWrittenByStub","_serverDocuments","_afterUpdateCallbacks","_subsBeingRevived","entries","_subscriptions","forEach","_ref","_ref2","id","sub","ready","_methodsBlockingQuiescence","_methodInvokers","keys","invoker","gotResult","push","dataVisible","apply","arguments","sentMessage","methodId","_messagesBufferedUntilQuiescence","_waitingForQuiescence","values","_stores","length","awrap","beginUpdate","endUpdate","_runAfterUpdateCallbacks","stop","Promise","_livedata_data","bufferedMessages","_i2","_Object$values2","bufferedMessage","standardWrite","_livedata_data$","_context2","subs","subId","methods","_processOneDataMessage","_bufferedWrites","_bufferedWritesInterval","_flushBufferedWrites","_bufferedWritesFlushAt","Date","valueOf","_bufferedWritesMaxAge","_bufferedWritesFlushHandle","clearTimeout","setTimeout","_liveDataWritesPromise","_isPromise","finally","undefined","updates","messageType","_processOneDataMessage$","_context3","t0","_process_added","_process_changed","_process_removed","_process_ready","_process_updated","_debug","_livedata_result","currentMethodBlock","i","m","_livedata_result$","_context4","_outstandingMethodBlocks","find","method","idx","found","splice","call","receiveResult","Error","error","reason","details","result","_livedata_nosub","errorCallback","stopCallback","meteorErrorFromMsg","_livedata_nosub$","_context5","remove","msgArg","_livedata_error","offendingMessage"],"sources":["packages/ddp-client/common/message_processors.js"],"sourcesContent":["import { DDPCommon } from 'meteor/ddp-common';\nimport { Meteor } from 'meteor/meteor';\nimport { DDP } from './namespace.js';\nimport { EJSON } from 'meteor/ejson';\nimport { isEmpty, hasOwn } from \"meteor/ddp-common/utils\";\n\nexport class MessageProcessors {\n  constructor(connection) {\n    this._connection = connection;\n  }\n\n  /**\n   * @summary Process the connection message and set up the session\n   * @param {Object} msg The connection message\n   */\n  async _livedata_connected(msg) {\n    const self = this._connection;\n\n    if (self._version !== 'pre1' && self._heartbeatInterval !== 0) {\n      self._heartbeat = new DDPCommon.Heartbeat({\n        heartbeatInterval: self._heartbeatInterval,\n        heartbeatTimeout: self._heartbeatTimeout,\n        onTimeout() {\n          self._lostConnection(\n            new DDP.ConnectionError('DDP heartbeat timed out')\n          );\n        },\n        sendPing() {\n          self._send({ msg: 'ping' });\n        }\n      });\n      self._heartbeat.start();\n    }\n\n    // If this is a reconnect, we'll have to reset all stores.\n    if (self._lastSessionId) self._resetStores = true;\n\n    let reconnectedToPreviousSession;\n    if (typeof msg.session === 'string') {\n      reconnectedToPreviousSession = self._lastSessionId === msg.session;\n      self._lastSessionId = msg.session;\n    }\n\n    if (reconnectedToPreviousSession) {\n      // Successful reconnection -- pick up where we left off.\n      return;\n    }\n\n    // Server doesn't have our data anymore. Re-sync a new session.\n\n    // Forget about messages we were buffering for unknown collections. They'll\n    // be resent if still relevant.\n    self._updatesForUnknownStores = Object.create(null);\n\n    if (self._resetStores) {\n      // Forget about the effects of stubs. We'll be resetting all collections\n      // anyway.\n      self._documentsWrittenByStub = Object.create(null);\n      self._serverDocuments = Object.create(null);\n    }\n\n    // Clear _afterUpdateCallbacks.\n    self._afterUpdateCallbacks = [];\n\n    // Mark all named subscriptions which are ready as needing to be revived.\n    self._subsBeingRevived = Object.create(null);\n    Object.entries(self._subscriptions).forEach(([id, sub]) => {\n      if (sub.ready) {\n        self._subsBeingRevived[id] = true;\n      }\n    });\n\n    // Arrange for \"half-finished\" methods to have their callbacks run, and\n    // track methods that were sent on this connection so that we don't\n    // quiesce until they are all done.\n    //\n    // Start by clearing _methodsBlockingQuiescence: methods sent before\n    // reconnect don't matter, and any \"wait\" methods sent on the new connection\n    // that we drop here will be restored by the loop below.\n    self._methodsBlockingQuiescence = Object.create(null);\n    if (self._resetStores) {\n      const invokers = self._methodInvokers;\n      Object.keys(invokers).forEach(id => {\n        const invoker = invokers[id];\n        if (invoker.gotResult()) {\n          // This method already got its result, but it didn't call its callback\n          // because its data didn't become visible. We did not resend the\n          // method RPC. We'll call its callback when we get a full quiesce,\n          // since that's as close as we'll get to \"data must be visible\".\n          self._afterUpdateCallbacks.push(\n            (...args) => invoker.dataVisible(...args)\n          );\n        } else if (invoker.sentMessage) {\n          // This method has been sent on this connection (maybe as a resend\n          // from the last connection, maybe from onReconnect, maybe just very\n          // quickly before processing the connected message).\n          //\n          // We don't need to do anything special to ensure its callbacks get\n          // called, but we'll count it as a method which is preventing\n          // reconnect quiescence. (eg, it might be a login method that was run\n          // from onReconnect, and we don't want to see flicker by seeing a\n          // logged-out state.)\n          self._methodsBlockingQuiescence[invoker.methodId] = true;\n        }\n      });\n    }\n\n    self._messagesBufferedUntilQuiescence = [];\n\n    // If we're not waiting on any methods or subs, we can reset the stores and\n    // call the callbacks immediately.\n    if (!self._waitingForQuiescence()) {\n      if (self._resetStores) {\n        for (const store of Object.values(self._stores)) {\n          await store.beginUpdate(0, true);\n          await store.endUpdate();\n        }\n        self._resetStores = false;\n      }\n      self._runAfterUpdateCallbacks();\n    }\n  }\n\n  /**\n   * @summary Process various data messages from the server\n   * @param {Object} msg The data message\n   */\n  async _livedata_data(msg) {\n    const self = this._connection;\n\n    if (self._waitingForQuiescence()) {\n      self._messagesBufferedUntilQuiescence.push(msg);\n\n      if (msg.msg === 'nosub') {\n        delete self._subsBeingRevived[msg.id];\n      }\n\n      if (msg.subs) {\n        msg.subs.forEach(subId => {\n          delete self._subsBeingRevived[subId];\n        });\n      }\n\n      if (msg.methods) {\n        msg.methods.forEach(methodId => {\n          delete self._methodsBlockingQuiescence[methodId];\n        });\n      }\n\n      if (self._waitingForQuiescence()) {\n        return;\n      }\n\n      // No methods or subs are blocking quiescence!\n      // We'll now process and all of our buffered messages, reset all stores,\n      // and apply them all at once.\n      const bufferedMessages = self._messagesBufferedUntilQuiescence;\n      for (const bufferedMessage of Object.values(bufferedMessages)) {\n        await this._processOneDataMessage(\n          bufferedMessage,\n          self._bufferedWrites\n        );\n      }\n      self._messagesBufferedUntilQuiescence = [];\n    } else {\n      await this._processOneDataMessage(msg, self._bufferedWrites);\n    }\n\n    // Immediately flush writes when:\n    //  1. Buffering is disabled. Or;\n    //  2. any non-(added/changed/removed) message arrives.\n    const standardWrite =\n      msg.msg === \"added\" ||\n      msg.msg === \"changed\" ||\n      msg.msg === \"removed\";\n\n    if (self._bufferedWritesInterval === 0 || !standardWrite) {\n      await self._flushBufferedWrites();\n      return;\n    }\n\n    if (self._bufferedWritesFlushAt === null) {\n      self._bufferedWritesFlushAt =\n        new Date().valueOf() + self._bufferedWritesMaxAge;\n    } else if (self._bufferedWritesFlushAt < new Date().valueOf()) {\n      await self._flushBufferedWrites();\n      return;\n    }\n\n    if (self._bufferedWritesFlushHandle) {\n      clearTimeout(self._bufferedWritesFlushHandle);\n    }\n    self._bufferedWritesFlushHandle = setTimeout(() => {\n      self._liveDataWritesPromise = self._flushBufferedWrites();\n      if (Meteor._isPromise(self._liveDataWritesPromise)) {\n        self._liveDataWritesPromise.finally(\n          () => (self._liveDataWritesPromise = undefined)\n        );\n      }\n    }, self._bufferedWritesInterval);\n  }\n\n  /**\n   * @summary Process individual data messages by type\n   * @private\n   */\n  async _processOneDataMessage(msg, updates) {\n    const messageType = msg.msg;\n\n    switch (messageType) {\n      case 'added':\n        await this._connection._process_added(msg, updates);\n        break;\n      case 'changed':\n        this._connection._process_changed(msg, updates);\n        break;\n      case 'removed':\n        this._connection._process_removed(msg, updates);\n        break;\n      case 'ready':\n        this._connection._process_ready(msg, updates);\n        break;\n      case 'updated':\n        this._connection._process_updated(msg, updates);\n        break;\n      case 'nosub':\n        // ignore this\n        break;\n      default:\n        Meteor._debug('discarding unknown livedata data message type', msg);\n    }\n  }\n\n  /**\n   * @summary Handle method results arriving from the server\n   * @param {Object} msg The method result message\n   */\n  async _livedata_result(msg) {\n    const self = this._connection;\n\n    // Lets make sure there are no buffered writes before returning result.\n    if (!isEmpty(self._bufferedWrites)) {\n      await self._flushBufferedWrites();\n    }\n\n    // find the outstanding request\n    // should be O(1) in nearly all realistic use cases\n    if (isEmpty(self._outstandingMethodBlocks)) {\n      Meteor._debug('Received method result but no methods outstanding');\n      return;\n    }\n    const currentMethodBlock = self._outstandingMethodBlocks[0].methods;\n    let i;\n    const m = currentMethodBlock.find((method, idx) => {\n      const found = method.methodId === msg.id;\n      if (found) i = idx;\n      return found;\n    });\n    if (!m) {\n      Meteor._debug(\"Can't match method response to original method call\", msg);\n      return;\n    }\n\n    // Remove from current method block. This may leave the block empty, but we\n    // don't move on to the next block until the callback has been delivered, in\n    // _outstandingMethodFinished.\n    currentMethodBlock.splice(i, 1);\n\n    if (hasOwn.call(msg, 'error')) {\n      m.receiveResult(\n        new Meteor.Error(msg.error.error, msg.error.reason, msg.error.details)\n      );\n    } else {\n      // msg.result may be undefined if the method didn't return a value\n      m.receiveResult(undefined, msg.result);\n    }\n  }\n\n  /**\n   * @summary Handle \"nosub\" messages arriving from the server\n   * @param {Object} msg The nosub message\n   */\n  async _livedata_nosub(msg) {\n    const self = this._connection;\n\n    // First pass it through _livedata_data, which only uses it to help get\n    // towards quiescence.\n    await this._livedata_data(msg);\n\n    // Do the rest of our processing immediately, with no\n    // buffering-until-quiescence.\n\n    // we weren't subbed anyway, or we initiated the unsub.\n    if (!hasOwn.call(self._subscriptions, msg.id)) {\n      return;\n    }\n\n    // XXX COMPAT WITH 1.0.3.1 #errorCallback\n    const errorCallback = self._subscriptions[msg.id].errorCallback;\n    const stopCallback = self._subscriptions[msg.id].stopCallback;\n\n    self._subscriptions[msg.id].remove();\n\n    const meteorErrorFromMsg = msgArg => {\n      return (\n        msgArg &&\n        msgArg.error &&\n        new Meteor.Error(\n          msgArg.error.error,\n          msgArg.error.reason,\n          msgArg.error.details\n        )\n      );\n    };\n\n    // XXX COMPAT WITH 1.0.3.1 #errorCallback\n    if (errorCallback && msg.error) {\n      errorCallback(meteorErrorFromMsg(msg));\n    }\n\n    if (stopCallback) {\n      stopCallback(meteorErrorFromMsg(msg));\n    }\n  }\n\n  /**\n   * @summary Handle errors from the server\n   * @param {Object} msg The error message\n   */\n  _livedata_error(msg) {\n    Meteor._debug('Received error from server: ', msg.reason);\n    if (msg.offendingMessage) Meteor._debug('For: ', msg.offendingMessage);\n  }\n\n  // Document change message processors will be defined in a separate class\n}"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"1d64ebcfcc654e6b0d353491d06fe95a84241ec6"}
